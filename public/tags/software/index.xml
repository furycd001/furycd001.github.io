<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on d:tour</title>
    <link>http://localhost:1313/tags/software/</link>
    <description>Recent content in Software on d:tour</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Aug 2024 06:54:17 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/software/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reimagining Terminal Software</title>
      <link>http://localhost:1313/posts/reimagining-terminal-software/</link>
      <pubDate>Fri, 23 Aug 2024 06:54:17 +0100</pubDate>
      <guid>http://localhost:1313/posts/reimagining-terminal-software/</guid>
      <description>&lt;p&gt;In the world of technology, there’s something quietly beautiful about the way people are revisiting and reimagining old terminal software. These programs, with their roots dating back to the early days of computing, have been the backbone of countless systems for decades. But as technology evolves, so do the ways we interact with it.&lt;/p&gt;&#xA;&lt;p&gt;Some modern developers are taking these time-tested tools and giving them a fresh coat of paint, not to erase the past but to enhance it. By rewriting and tweaking the old software, they aim to improve functionality, make interfaces more intuitive, or simply adapt the software to meet today’s needs. It’s a delicate balance—respecting the original while embracing the possibilities of the new.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
